name: "Install dependencies via apt"
description: "dummy description"

inputs:
  install-third-party-libraries:
    description: "Should be set to false for conan builds"
    required: true
    default: "true"
  cmake-version:
    description: "Minimum required cmake version"
    required: false
    default: "3.27"
  cmake-build-version:
    description: "The cmake build version to install if the minimum version is not met"
    required: false
    default: "0"

runs:
  using: "composite"
  steps:
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
    - name: Install basic compiler
      run:  |
        sudo apt-get update
        sudo apt-get install -y build-essential
      shell: bash

    - name: Get cmake version
      id: cmake
      run: |
        echo "::set-output name=cmake-version::$(cmake --version | head -n1 | cut -d' ' -f3)"
        echo "Minimum desired version: ${{ inputs.cmake-version }}"
      shell: bash

    - name: Ensure cmake version >= ${{ inputs.cmake-version }}
      if: steps.cmake.outputs.cmake-version < inputs.cmake-version
      run:  |
        sudo apt-get remove -y cmake
        export CMAKE_FULL_VERSION="cmake-${{ inputs.cmake-version }}.${{ inputs.cmake-build-version }}-linux-x86_64"
        wget "https://cmake.org/files/v${{ inputs.cmake-version }}/${CMAKE_FULL_VERSION}.tar.gz"
        tar -xzvf ${CMAKE_FULL_VERSION}.tar.gz
        sudo mv ${CMAKE_FULL_VERSION} /opt/cmake
        echo "/opt/cmake/bin" >> $GITHUB_PATH
        export PATH="/opt/cmake/bin:$PATH"
        cmake --version
      shell: bash

    - name: Install third-party libraries
      if: inputs.install-third-party-libraries == 'true'
      run:  |
        sudo apt-get install -y libicu-dev tzdata libzstd-dev libjemalloc-dev
      shell: bash

    - name: Install boost from PPA
      if: inputs.install-third-party-libraries == 'true'
      run: sudo add-apt-repository -y ppa:mhier/libboost-latest && sudo apt update && sudo apt install -y libboost1.81-all-dev libboost-url1.81-dev
      shell: bash

    - name: Install Python packages for E2E tests
      run: sudo apt-get install -y python3-yaml unzip pkg-config python3-icu
      shell: bash
