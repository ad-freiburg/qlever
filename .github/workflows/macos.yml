name: Native build with conan on MacOS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  merge_group:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    # The CMake configure and build commands are platform-agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      fail-fast: false
      matrix:
        warnings: [  "-Wall -Wextra -Werror -fsanitize=address -fno-omit-frame-pointer" ]
        build-type: [Release]
    runs-on: macos-12


    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install ICU dependency for python (only needed for E2E test)
      run: |
        brew install pkg-config icu4c 
        echo PATH="/usr/local/opt/icu4c/bin:/usr/local/opt/icu4c/sbin:$PATH" >> $GITHUB_ENV
        echo PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/icu4c/lib/pkgconfig" >> $GITHUB_ENV
    - name: Install python dependencies for E2E tests
      run: |
        pip3 install pyaml pyicu

    - name: Install dependencies
      run:  |
        brew install llvm@16
        brew install conan@2
        echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> ~/.bash_profile
        echo PATH="/usr/local/opt/llvm/bin:$PATH" >> $GITHUB_ENV 
        source ~/.bash_profile
    - name: Pring clang version
      run: clang++ --version

    - name: Cache for conan
      uses: actions/cache@v3
      env:
        cache-name: cache-conan-modules
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.txt') }}
    - name: Create build directory
      run: mkdir ${{github.workspace}}/build
    - name: Install and run conan
      working-directory: ${{github.workspace}}/build
      run: >
        conan install .. -pr:b=../conanprofiles/clang-16-macos -pr:h=../conanprofiles/clang-16-macos -of=. --build=missing;
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.build-type}} -DCMAKE_TOOLCHAIN_FILE="$(pwd)/build/conan_toolchain.cmake" -DADDITIONAL_COMPILER_FLAGS="${{env.warnings}}" -DUSE_PARALLEL=true -DRUN_EXPENSIVE_TESTS=false -DENABLE_EXPENSIVE_CHECKS=true -DCMAKE_CXX_COMPILER=clang++

    - name: Build
        # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build-type}} -- -j $(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build/test
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        source ../conanrun.sh;
        env CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{matrix.build-type}} .;

    - name: Running and printing the benchmark examples.
      working-directory: ${{github.workspace}}/build
      run: > 
        source ./conanrun.sh;
        benchmark/BenchmarkExamples -p;

    - name: E2E
      run: >
        source ${{github.workspace}}/build/conanrun.sh;
        ${{github.workspace}}/e2e/e2e.sh;
