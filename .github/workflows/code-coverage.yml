name: measure-code-coverage

on:
  pull_request:
    branches: [ master, '**' ]

jobs:
  build:
    env:
          compiler: clang
          compiler-version: 15
          build-type: Debug
          warnings: "-Wall -Wextra "
          asan-flags: "-fsanitize=address -fno-omit-frame-pointer"
          ubsan-flags: " -fsanitize=undefined"
          coverage-flags: "-fprofile-instr-generate -fcoverage-mapping"

    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: "recursive"

    - name: Install dependencies
      run:  sudo apt update && sudo apt-get install -y libicu-dev tzdata gcc-10 libzstd-dev libjemalloc-dev libboost-all-dev
    - name: Install clang 15
      run:  wget https://apt.llvm.org/llvm.sh && sudo chmod +x llvm.sh && sudo ./llvm.sh 15 all
    - name: Python dependencies
      run: sudo apt-get install python3-yaml unzip pkg-config python3-icu
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.build-type}} -DCMAKE_TOOLCHAIN_FILE="$(pwd)/toolchains/${{env.compiler}}${{env.compiler-version}}.cmake" -DADDITIONAL_COMPILER_FLAGS="${{env.warnings}} ${{env.asan-flags}} ${{env.ubsan-flags}} ${{env.coverage-flags}}" -DADDITIONAL_LINKER_FLAGS="${{env.coverage-flags}}" -DUSE_PARALLEL=true -DRUN_EXPENSIVE_TESTS=false

    - name: Build
        # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.build-type}} -t ValueIdComparatorsTest -- -j $(nproc)
    - name: Test
      working-directory: ${{github.workspace}}/build/test
      env:
        LLVM_PROFILE_FILE: "default%p.profraw"
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: env CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.build-type}} -R ValueIdComparators. .

    - name: GetListOfExecutablesForCoverageInfo
      working-directory: ${{github.workspace}}/build/test
      run: ctest --show-only=json-v1 > tests.json && python3 ${{github.workspace}}/misc/ctest-output-to-executables.py tests.json tests.txt
    - name: Process coverage info
      working-directory: ${{github.workspace}}/build/test
      run:  >
        llvm-profdata-15 merge -sparse *.profraw -o default.profdata;
        xargs -a tests.txt llvm-cov-15 export --format=lcov --instr-profile ./default.profdata --ignore-filename-regex="/third_party/" --ignore-filename-regex="/generated/"  --ignore-filename-regex="/nlohmann/" --ignore-filename-regex="/ctre/"  --ignore-filename-regex="/test/" > ./coverage.lcov

    - name: "Submit coverage data to codecov.io"
      if: github.event_name != 'pull_request'
      uses: codecov/codecov-action@v3
        with:
          file: ${{github.workspace}}/build/test/coverage.lcov
          # Note: technically, a `token` is not required for codecov.io when
          # uploading from a public repository, but specifying it avoids the
          # nasty spurious failures due to Github's rate limit for codecov's
          # public default token.
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

    - name: Save PR number and coverage file in same directory
      if: github.event_name == 'pull_request'
      run : |
        mkdir -p coverage-report
        echo ${{ github.event.number }} > ./coverage-report/pr
        echo ${{ github.repository }} > ./coverage-report/github_repository
        echo ${GITHUB_REF} > ./coverage-report/github_ref
        mv ${{ github.workspace}}/build/test/coverage.lcov coverage-report
    - name: Upload coverage artifact
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage-report/
    # Note: for now we do not run the e2e tests for the coverage check

