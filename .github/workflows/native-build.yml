name: Native build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      fail-fast: false
      matrix:
        compiler: [ gcc11, gcc12, clang13 ]
        #TODO<joka921> We can run all jobs on the same queue as soon as the ubuntu-22.04
        # runner is no longer in the beta stage. Only runners that support all the platforms
        # will pick up a job, and so we have to wait for a very long time currently.
        os: [ ubuntu-20.04, ubuntu-22.04 ]
        warnings: [  "-Wall -Wextra -Werror" ]
        exclude:
          - compiler: gcc11
            os: ubuntu-22.04
          - compiler: gcc12
            os: ubuntu-20.04
          - compiler: clang13
            os: ubuntu-20.04
    runs-on: ${{ matrix.os }}


    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run:  sudo apt update && sudo apt-get install -y libicu-dev tzdata gcc-10 libzstd-dev libjemalloc-dev
    - name: Install boost Ubuntu 20.04
      run : sudo add-apt-repository -y ppa:mhier/libboost-latest && sudo apt update && sudo apt install -y libboost1.74-dev
      if : matrix.os == 'ubuntu-20.04'
    - name: Install boost Ubuntu 22.04
      run : sudo apt update && sudo apt install -y libboost-all-dev
      if :  matrix.os == 'ubuntu-22.04'
    - name: Install gcc 11
      run : sudo add-apt-repository ppa:ubuntu-toolchain-r/test && sudo apt update && sudo apt install -y gcc-11 g++-11
      if :  matrix.compiler != 'gcc12'
    - name: Install gcc 12
      run : sudo add-apt-repository ppa:ubuntu-toolchain-r/test && sudo apt update && sudo apt install -y gcc-11 g++-12
      if :  matrix.compiler  == 'gcc12'
    - name: Install clang 13
      run: wget https://apt.llvm.org/llvm.sh && sudo chmod +x llvm.sh && sudo ./llvm.sh 13
      if:  matrix.compiler == 'clang13'
    - name: Install libc++-13
      run : sudo apt install -y libunwind-13-dev libc++abi-13-dev libc++-13-dev
      if:  matrix.compiler == 'clang13'

    - name: Python dependencies
      run: sudo apt-get install python3-yaml unzip pkg-config python3-icu

    - name: Checkout submodules
      run: git submodule update --init --recursive


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=$(pwd)/toolchains/${{matrix.compiler}}.cmake -DADDITIONAL_COMPILER_FLAGS="${{matrix.warnings}}" -DUSE_PARALLEL=true -DRUN_EXPENSIVE_TESTS=true

    - name: Build
        # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- -j $(nproc)
    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: env CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.BUILD_TYPE}}

    - name: E2E
      run: ${{github.workspace}}/e2e/e2e.sh

